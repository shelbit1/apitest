// –û–±—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wildberries API

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Wildberries
export interface WildberriesRequestOptions {
  method: string;
  headers: Record<string, string>;
  body?: string;
}

// –ë–∞–∑–æ–≤—ã–µ URL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
const API_URLS = {
  statistics: 'https://statistics-api.wildberries.ru',
  advert: 'https://advert-api.wildberries.ru'
};

// –û–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const getCommonHeaders = (token: string): Record<string, string> => ({
  'Authorization': token,
  'User-Agent': 'Mozilla/5.0 (compatible; WB-API-Client/1.0)',
  'Accept': 'application/json',
  'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API Wildberries —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function makeWildberriesRequest(
  url: string,
  token: string,
  maxRetries: number = 3
): Promise<any> {
  const options: RequestInit = {
    method: 'GET',
    headers: getCommonHeaders(token)
  };

  let lastError: Error | null = null;

  for (let i = 0; i < maxRetries; i++) {
    try {
      const response = await fetch(url, options);

      if (response.status === 429) {
        // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        const delay = Math.pow(2, i) * 1000; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        console.log(`‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}ms...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ API Wildberries: ${response.status} ${response.statusText}`);
      }

      return await response.json();

    } catch (error) {
      lastError = error as Error;
      console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);

      if (i < maxRetries - 1) {
        const delay = Math.pow(2, i) * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }

  throw lastError || new Error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
export async function getRealizationData(token: string, startDate: string, endDate: string) {
  const url = `${API_URLS.statistics}/api/v5/supplier/reportDetailByPeriod?dateFrom=${startDate}&dateTo=${endDate}`;
  console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${startDate} - ${endDate}`);
  
  try {
    const data = await makeWildberriesRequest(url, token);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Array.isArray(data) ? data.length : 0} –∑–∞–ø–∏—Å–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏`);
    return Array.isArray(data) ? data : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏
export async function getStorageData(token: string, startDate: string) {
  const url = `${API_URLS.statistics}/api/v1/supplier/stocks?dateFrom=${startDate}`;
  console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å ${startDate}`);
  
  try {
    const data = await makeWildberriesRequest(url, token);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Array.isArray(data) ? data.length : 0} –∑–∞–ø–∏—Å–µ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è`);
    return Array.isArray(data) ? data : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–µ–º–∫–µ
export async function getAcceptanceData(token: string, startDate: string, endDate: string) {
  const url = `${API_URLS.statistics}/api/v1/supplier/incomes?dateFrom=${startDate}&dateTo=${endDate}`;
  console.log(`üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${startDate} - ${endDate}`);
  
  try {
    const data = await makeWildberriesRequest(url, token);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Array.isArray(data) ? data.length : 0} –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–µ–º–∫–∏`);
    return Array.isArray(data) ? data : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–∫–∏:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export async function getFinancialData(token: string, startDate: string, endDate: string) {
  const url = `${API_URLS.advert}/adv/v2/finance/wallet/daily?date=${startDate}&toDate=${endDate}`;
  console.log(`üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: ${startDate} - ${endDate}`);
  
  try {
    const data = await makeWildberriesRequest(url, token);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Array.isArray(data) ? data.length : 0} –∑–∞–ø–∏—Å–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
    return Array.isArray(data) ? data : [];
  } catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö
export async function getProductsData(token: string) {
  const url = `${API_URLS.statistics}/api/v1/supplier/cards`;
  console.log(`üõçÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
  
  try {
    const data = await makeWildberriesRequest(url, token);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Array.isArray(data) ? data.length : 0} –∑–∞–ø–∏—Å–µ–π —Ç–æ–≤–∞—Ä–æ–≤`);
    return Array.isArray(data) ? data : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
export async function getPaymentsData(token: string, startDate: string, endDate: string) {
  const url = `${API_URLS.statistics}/api/v1/supplier/reportDetailByPeriod?dateFrom=${startDate}&dateTo=${endDate}`;
  console.log(`üí≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥: ${startDate} - ${endDate}`);
  
  try {
    const data = await makeWildberriesRequest(url, token);
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${Array.isArray(data) ? data.length : 0} –∑–∞–ø–∏—Å–µ–π –ø–ª–∞—Ç–µ–∂–µ–π`);
    return Array.isArray(data) ? data : [];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
export async function getAllWildberriesData(
  token: string,
  startDate: string,
  endDate: string
) {
  console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö Wildberries –∑–∞ –ø–µ—Ä–∏–æ–¥: ${startDate} - ${endDate}`);
  
  const [
    realizationData,
    storageData,
    acceptanceData,
    financialData,
    productsData,
    paymentsData
  ] = await Promise.all([
    getRealizationData(token, startDate, endDate),
    getStorageData(token, startDate),
    getAcceptanceData(token, startDate, endDate),
    getFinancialData(token, startDate, endDate),
    getProductsData(token),
    getPaymentsData(token, startDate, endDate)
  ]);

  return {
    realizationData,
    storageData,
    acceptanceData,
    financialData,
    productsData,
    paymentsData,
    campaigns: [],
    advertData: [],
    costPriceData: [],
    productAnalyticsData: []
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
export function validateWildberriesToken(token: string): boolean {
  if (!token || token.length < 10) {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const invalidChars = token.match(/[^A-Za-z0-9+/=\-_.]/g);
  return !invalidChars;
} 