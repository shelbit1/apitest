'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'

interface Cabinet {
  id: string
  name: string
  token: string
  createdAt: string
}

interface WeekPeriod {
  id: string
  start: string
  end: string
  status: 'pending' | 'downloading' | 'completed' | 'error'
  fileName?: string
  errorMessage?: string
  downloadedAt?: string
  serverPath?: string
  relativePath?: string
  fileExists?: boolean
}

interface AutoloadProgress {
  cabinetId: string
  periods: WeekPeriod[]
  isActive: boolean
  lastUpdate: string
}

export default function AutoloadPage() {
  const router = useRouter()
  const [cabinet, setCabinet] = useState<Cabinet | null>(null)
  const [periods, setPeriods] = useState<WeekPeriod[]>([])
  const [loadingPeriods, setLoadingPeriods] = useState<Set<string>>(new Set())

  useEffect(() => {
    const initPage = async () => {
      const path = window.location.pathname
      const cabinetId = path.split('/')[2]
      
      if (!cabinetId) {
        router.push('/cabinets')
        return
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ
      const cabinets = JSON.parse(localStorage.getItem('wildberries_cabinets') || '[]')
      const cabinetData = cabinets.find((c: Cabinet) => c.id === cabinetId)
      
      if (!cabinetData) {
        router.push('/cabinets')
        return
      }

      setCabinet(cabinetData)
      await initializeReports(cabinetData)
    }

    initPage()
  }, [router])

  const initializeReports = async (cabinetData: Cabinet) => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const savedProgress = localStorage.getItem(`autoload_progress_${cabinetData.id}`)
    
    if (savedProgress) {
      const progress: AutoloadProgress = JSON.parse(savedProgress)
      setPeriods(progress.periods)
      await updateFileExistenceStatus(progress.periods)
    } else {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã
      const weeklyPeriods = generateWeeklyPeriods()
      setPeriods(weeklyPeriods)
      saveProgress(weeklyPeriods)
    }
  }

  const generateWeeklyPeriods = (): WeekPeriod[] => {
    const periods: WeekPeriod[] = []
    const now = new Date()
    const currentDate = new Date(now)
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –∏–¥–µ–º –Ω–∞–∑–∞–¥ –Ω–∞ 24 –Ω–µ–¥–µ–ª–∏
    for (let i = 0; i < 24; i++) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
      const monday = new Date(currentDate)
      const dayOfWeek = monday.getDay()
      const daysSinceMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1
      monday.setDate(monday.getDate() - daysSinceMonday)
      
      // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–æ–π –∂–µ –Ω–µ–¥–µ–ª–∏
      const sunday = new Date(monday)
      sunday.setDate(monday.getDate() + 6)
      
      periods.push({
        id: `week-${i}`,
        start: formatDate(monday),
        end: formatDate(sunday),
        status: 'pending'
      })
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ
      currentDate.setDate(currentDate.getDate() - 7)
    }
    
    return periods
  }

  const formatDate = (date: Date): string => {
    return date.toISOString().split('T')[0]
  }

  const getDayOfWeek = (dateStr: string): string => {
    const date = new Date(dateStr)
    const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']
    return days[date.getDay()]
  }

  const saveProgress = (updatedPeriods: WeekPeriod[]) => {
    if (!cabinet) return
    
    const progress: AutoloadProgress = {
      cabinetId: cabinet.id,
      periods: updatedPeriods,
      isActive: false,
      lastUpdate: new Date().toISOString()
    }
    
    localStorage.setItem(`autoload_progress_${cabinet.id}`, JSON.stringify(progress))
    setPeriods(updatedPeriods)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  const loadSingleReport = async (period: WeekPeriod) => {
    if (!cabinet || loadingPeriods.has(period.id)) return

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
    if (!isPeriodAvailable(period.end)) {
      alert(`–ü–µ—Ä–∏–æ–¥ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–æ—Å—Ç—É–ø–Ω–æ —Å ${getAvailableDate(period.end)}`)
      return
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≥—Ä—É–∂–∞—é—â–∏–µ—Å—è
    setLoadingPeriods(prev => new Set([...prev, period.id]))

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "downloading"
    const updatedPeriods = periods.map(p => 
      p.id === period.id ? { ...p, status: 'downloading' as const } : p
    )
    saveProgress(updatedPeriods)

    try {
      const response = await fetch('/api/wildberries/autoload-save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          cabinetId: cabinet.id,
          token: cabinet.token,
          startDate: period.start,
          endDate: period.end,
          cabinetName: cabinet.name
        })
      })

      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
      let result: any = {};
      try {
        result = await response.json();
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
      }

      if (!response.ok) {
        const message = result?.error || `HTTP error! status: ${response.status}`
        throw new Error(message)
      }

      // –ï—Å–ª–∏ success === false —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (!result.success) {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
      }
 
      // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
      const completedPeriods = periods.map(p => 
        p.id === period.id ? {
          ...p,
          status: 'completed' as const,
          fileName: result.fileName,
          downloadedAt: new Date().toISOString(),
          serverPath: result.serverPath,
          relativePath: result.relativePath,
          fileExists: true
        } : p
      )
      saveProgress(completedPeriods)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞:', error)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "error"
      const errorPeriods = periods.map(p => 
        p.id === period.id ? {
          ...p,
          status: 'error' as const,
          errorMessage: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        } : p
      )
      saveProgress(errorPeriods)
    } finally {
      // –£–±–∏—Ä–∞–µ–º –∏–∑ –∑–∞–≥—Ä—É–∂–∞—é—â–∏—Ö—Å—è
      setLoadingPeriods(prev => {
        const newSet = new Set(prev)
        newSet.delete(period.id)
        return newSet
      })
    }
  }

  const checkFileExists = async (fileName: string): Promise<{exists: boolean, relativePath: string | null}> => {
    try {
      const response = await fetch('/api/wildberries/check-file', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ fileName })
      })
      
      if (!response.ok) return { exists: false, relativePath: null }
      
      const result = await response.json()
      return {
        exists: result.exists || false,
        relativePath: result.relativePath || null
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞:', error)
      return { exists: false, relativePath: null }
    }
  }

  const updateFileExistenceStatus = async (periodsToCheck?: WeekPeriod[]) => {
    const targetPeriods = periodsToCheck || periods
    const completedPeriods = targetPeriods.filter(p => p.status === 'completed' && p.fileName)
    
    if (completedPeriods.length === 0) return

    for (const period of completedPeriods) {
      if (period.fileName) {
        const fileInfo = await checkFileExists(period.fileName)
        if (period.fileExists !== fileInfo.exists || period.relativePath !== fileInfo.relativePath) {
                      const updatedPeriods = targetPeriods.map(p => 
              p.id === period.id ? { 
                ...p, 
                fileExists: fileInfo.exists,
                relativePath: fileInfo.relativePath || undefined
              } : p
            )
          saveProgress(updatedPeriods)
        }
      }
    }
  }

  const resetPeriod = (periodId: string) => {
    const updatedPeriods = periods.map(period => 
      period.id === periodId 
        ? { 
            ...period, 
            status: 'pending' as const, 
            errorMessage: undefined,
            fileName: undefined,
            downloadedAt: undefined,
            serverPath: undefined,
            relativePath: undefined,
            fileExists: undefined
          } 
        : period
    )
    saveProgress(updatedPeriods)
  }

  const formatDisplayDate = (dateStr: string): string => {
    const date = new Date(dateStr)
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit'
    })
  }

  const isPeriodAvailable = (endDate: string): boolean => {
    const end = new Date(endDate)
    const today = new Date()
    const daysDiff = Math.floor((today.getTime() - end.getTime()) / (1000 * 60 * 60 * 24))
    return daysDiff >= 3
  }

  const getAvailableDate = (endDate: string): string => {
    const end = new Date(endDate)
    const availableDate = new Date(end)
    availableDate.setDate(end.getDate() + 3)
    return availableDate.toLocaleDateString('ru-RU')
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'pending': return '‚è≥'
      case 'downloading': return 'üîÑ'
      case 'completed': return '‚úÖ'
      case 'error': return '‚ùå'
      default: return '‚è≥'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return '–û–∂–∏–¥–∞–µ—Ç'
      case 'downloading': return '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'
      case 'completed': return '–ì–æ—Ç–æ–≤'
      case 'error': return '–û—à–∏–±–∫–∞'
      default: return '–û–∂–∏–¥–∞–µ—Ç'
    }
  }

  if (!cabinet) {
    return <div className="p-8">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  }

  const completedCount = periods.filter(p => p.status === 'completed').length
  const errorCount = periods.filter(p => p.status === 'error').length
  const pendingCount = periods.filter(p => p.status === 'pending').length
  const downloadingCount = periods.filter(p => p.status === 'downloading').length

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">–ú–æ–∏ –æ—Ç—á–µ—Ç—ã</h1>
              <p className="text-gray-600">–ö–∞–±–∏–Ω–µ—Ç: {cabinet.name}</p>
            </div>
            <button
              onClick={() => router.push('/cabinets')}
              className="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition-colors"
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–∞–±–∏–Ω–µ—Ç–∞–º
            </button>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-4 gap-4 mb-6">
            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{periods.length}</div>
              <div className="text-sm text-blue-800">–í—Å–µ–≥–æ –Ω–µ–¥–µ–ª—å</div>
            </div>
            <div className="bg-green-50 p-4 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{completedCount}</div>
              <div className="text-sm text-green-800">–ì–æ—Ç–æ–≤–æ</div>
            </div>
            <div className="bg-yellow-50 p-4 rounded-lg">
              <div className="text-2xl font-bold text-yellow-600">{pendingCount}</div>
              <div className="text-sm text-yellow-800">–û–∂–∏–¥–∞–µ—Ç</div>
            </div>
            <div className="bg-red-50 p-4 rounded-lg">
              <div className="text-2xl font-bold text-red-600">{errorCount}</div>
              <div className="text-sm text-red-800">–û—à–∏–±–∫–∏</div>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="mb-6 p-4 bg-blue-50 rounded-lg">
            <div className="text-sm text-blue-800">
              <div className="font-semibold mb-2">‚ÑπÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</div>
              <ul className="space-y-1">
                <li>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç" —Ä—è–¥–æ–º —Å –Ω—É–∂–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º</li>
                <li>‚Ä¢ –û—Ç—á–µ—Ç—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É</li>
                <li>‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</li>
                <li>‚Ä¢ –°–∫–∞—á–∏–≤–∞–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –∫–Ω–æ–ø–∫–æ–π "üì• –°–∫–∞—á–∞—Ç—å"</li>
                <li>‚Ä¢ –ü–µ—Ä–∏–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ–¥–µ–ª–∏</li>
              </ul>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ */}
          <div className="space-y-2">
            <h3 className="font-semibold mb-4">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã ({periods.length})</h3>
            <div className="max-h-96 overflow-y-auto border rounded-lg">
              {periods.map((period) => {
                const isAvailable = isPeriodAvailable(period.end)
                const isUnavailable = period.status === 'pending' && !isAvailable
                const isLoading = loadingPeriods.has(period.id) || period.status === 'downloading'
                
                return (
                  <div key={period.id} className={`p-3 border-b last:border-b-0 flex justify-between items-center ${
                    isLoading ? 'bg-blue-50 border-blue-200' : ''
                  } ${isUnavailable ? 'opacity-60 bg-gray-50' : ''}`}>
                    <div className="flex items-center gap-3">
                      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å–ª–µ–≤–∞ –æ—Ç –¥–∞—Ç—ã */}
                      {period.status === 'completed' && period.fileName && (
                        period.fileExists === false ? (
                          <button 
                            className="bg-gray-400 text-white px-3 py-1 rounded text-sm cursor-not-allowed flex items-center gap-1"
                            disabled
                            title="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
                          >
                            ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                          </button>
                        ) : (
                          <div className="flex gap-2">
                            <a 
                              href={period.relativePath ? `/reports/${period.relativePath}` : `/reports/${period.fileName}`} 
                              download={period.fileName}
                            >
                              <button className="bg-green-500 text-white px-3 py-1 rounded text-sm hover:bg-green-600 font-medium flex items-center gap-1">
                                üì• –°–∫–∞—á–∞—Ç—å
                              </button>
                            </a>
                            <button
                              onClick={() => loadSingleReport(period)}
                              disabled={isLoading}
                              className={`px-3 py-1 rounded text-sm font-medium flex items-center gap-1 ${
                                isLoading 
                                  ? 'bg-blue-400 text-white cursor-not-allowed' 
                                  : 'bg-orange-500 text-white hover:bg-orange-600'
                              }`}
                            >
                              {isLoading ? '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...' : 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å'}
                            </button>
                          </div>
                        )
                      )}
                      
                      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è pending –∏ error –ø–µ—Ä–∏–æ–¥–æ–≤ */}
                      {(period.status === 'pending' || period.status === 'error') && isAvailable && (
                        <button
                          onClick={() => loadSingleReport(period)}
                          disabled={isLoading}
                          className={`px-3 py-1 rounded text-sm font-medium flex items-center gap-1 ${
                            isLoading 
                              ? 'bg-blue-400 text-white cursor-not-allowed' 
                              : 'bg-blue-600 text-white hover:bg-blue-700'
                          }`}
                        >
                          {isLoading ? '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...' : 'üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç'}
                        </button>
                      )}

                      <span className="text-xl">{getStatusIcon(period.status)}</span>
                      <div>
                        <div className="font-medium">
                          {formatDisplayDate(period.start)} ({getDayOfWeek(period.start)}) - {formatDisplayDate(period.end)} ({getDayOfWeek(period.end)})
                        </div>
                        <div className="text-sm text-gray-600">
                          –°—Ç–∞—Ç—É—Å: {getStatusText(period.status)}
                          {period.status === 'pending' && !isPeriodAvailable(period.end) && (
                            <span className="ml-2 text-orange-600">‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å {getAvailableDate(period.end)}</span>
                          )}
                          {period.fileName && (
                            <span className="ml-2 text-green-600">‚Ä¢ {period.fileName}</span>
                          )}
                          {period.downloadedAt && (
                            <span className="ml-2 text-gray-500">
                              ‚Ä¢ –ì–æ—Ç–æ–≤: {new Date(period.downloadedAt).toLocaleDateString('ru-RU')}
                            </span>
                          )}
                        </div>
                        {period.errorMessage && (
                          <div className="text-sm text-red-600 mt-1">
                            –û—à–∏–±–∫–∞: {period.errorMessage}
                          </div>
                        )}
                      </div>
                    </div>
                    <div className="flex gap-2">
                      {period.status === 'error' && (
                        <button
                          onClick={() => resetPeriod(period.id)}
                          className="text-sm bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600"
                        >
                          –°–±—Ä–æ—Å–∏—Ç—å
                        </button>
                      )}
                    </div>
                  </div>
                )
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 
