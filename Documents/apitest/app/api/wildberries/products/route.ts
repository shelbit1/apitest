import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤");
    
    const { token } = await request.json();

    if (!token) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω");
      return NextResponse.json(
        { error: "–¢–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" },
        { status: 400 }
      );
    }

    console.log(`üîë –¢–æ–∫–µ–Ω: ${token.substring(0, 20)}...`);

    // URL API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const apiUrl = "https://content-api.wildberries.ru/content/v2/get/cards/list";
    
    // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
    const requestBody = {
      settings: {
        cursor: {
          limit: 100
        },
        filter: {
          withPhoto: -1
        }
      }
    };

    console.log(`üì° URL –∑–∞–ø—Ä–æ—Å–∞: ${apiUrl}`);
    console.log(`üìÑ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:`, JSON.stringify(requestBody, null, 2));
    console.log(`üîë –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${token.substring(0, 30)}...`);
    
    // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –æ–±—ã—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    let response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Authorization": token,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody)
    });

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Å Bearer –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    if (!response.ok && response.status === 401) {
      console.log("üîÑ –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å Bearer –ø—Ä–µ—Ñ–∏–∫—Å–æ–º...");
      response = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Authorization": token.startsWith('Bearer ') ? token : `Bearer ${token}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody)
      });
    }
    
    console.log(`üìä –û—Ç–≤–µ—Ç API: ${response.status} ${response.statusText}`);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ API Wildberries: ${response.status} ${response.statusText}`);
      console.error(`‚ùå –¢–µ–ª–æ –æ—à–∏–±–∫–∏: ${errorText}`);
      console.error(`‚ùå –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:`, Object.fromEntries(response.headers.entries()));
      
      let errorMessage = `–û—à–∏–±–∫–∞ API Wildberries: ${response.status}`;
      if (response.status === 401) {
        errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API —Ç–æ–∫–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ö–æ–Ω—Ç–µ–Ω—Ç'";
      } else if (response.status === 403) {
        errorMessage = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ö–æ–Ω—Ç–µ–Ω—Ç'";
      } else if (response.status === 429) {
        errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
      }
      
      return NextResponse.json(
        { error: `${errorMessage}. –î–µ—Ç–∞–ª–∏: ${errorText}` },
        { status: response.status }
      );
    }

    const data = await response.json();
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:`, JSON.stringify(data, null, 2));

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const cards = data.cards || [];
    console.log(`üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${cards.length}`);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—è –∫–∞–∂–¥—ã–π —Ä–∞–∑–º–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    const products: any[] = [];
    
    cards.forEach((card: any) => {
      const baseProduct = {
        nmID: card.nmID,
        vendorCode: card.vendorCode,
        object: card.object || '',
        brand: card.brand || ''
      };

      if (card.sizes && card.sizes.length > 0) {
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
        card.sizes.forEach((size: any) => {
          if (size.skus && size.skus.length > 0) {
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ SKU –≤ —Ä–∞–∑–º–µ—Ä–µ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            size.skus.forEach((sku: string) => {
              products.push({
                ...baseProduct,
                sizeName: size.techSize || size.wbSize || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞',
                barcode: sku,
                price: size.price || 0
              });
            });
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç SKU, –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
            products.push({
              ...baseProduct,
              sizeName: size.techSize || size.wbSize || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞',
              barcode: '',
              price: size.price || 0
            });
          }
        });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞
        products.push({
          ...baseProduct,
          sizeName: '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞',
          barcode: '',
          price: 0
        });
      }
    });

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${cards.length}, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –ø–æ–∑–∏—Ü–∏–π: ${products.length}`);

    return NextResponse.json(products, { status: 200 });

  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json(
    { message: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤" },
    { status: 405 }
  );
} 