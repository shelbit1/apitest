import { NextRequest, NextResponse } from "next/server";
import * as fs from "fs/promises";
import * as path from "path";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–∞–º–æ–º—É —Å–µ–±–µ
import { POST as generateReport } from "../report/route";

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ 10 –º–∏–Ω—É—Ç –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
export const runtime = 'nodejs';
export const maxDuration = 600; // 10 –º–∏–Ω—É—Ç

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ –ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
    
    const { token, startDate, endDate, cabinetName, cabinetId } = await request.json();

    if (!token || !startDate || !endDate || !cabinetId) {
      console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
      return NextResponse.json(
        { error: "–¢–æ–∫–µ–Ω, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞, –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É reports –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const reportsDir = path.join(process.cwd(), 'reports');
    try {
      await fs.access(reportsDir);
    } catch {
      await fs.mkdir(reportsDir, { recursive: true });
      console.log("üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ reports/");
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫—É –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞: cabinet_<id>
    const cabinetDirName = `cabinet_${cabinetId}`;
    const cabinetDir = path.join(reportsDir, cabinetDirName);
    try {
      await fs.access(cabinetDir);
    } catch {
      await fs.mkdir(cabinetDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞: ${cabinetDir}`);
    }

    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á–µ—Ç–∞: ${startDate} - ${endDate}`);
    console.log(`üè¢ –ö–∞–±–∏–Ω–µ—Ç: ${cabinetName}`);

    // –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    console.log("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ‚Ä¶");

    const internalRequestBody = {
      token,
      startDate,
      endDate,
      costPricesData: {}, // –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
    };

    const internalRequest = new NextRequest(new URL('/api/wildberries/report', request.url), {
      method: 'POST',
      headers: new Headers({
        'Content-Type': 'application/json',
      }),
      body: JSON.stringify(internalRequestBody),
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 5 –º–∏–Ω—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    const reportResponse = await Promise.race([
      generateReport(internalRequest),
      new Promise<never>((_, reject) => 
        setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ (5 –º–∏–Ω—É—Ç)')), 5 * 60 * 1000)
      )
    ]);

    if (!reportResponse.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: ${reportResponse.status}`);
      let errorData;
      try {
        errorData = await reportResponse.json();
      } catch {
        errorData = { error: `HTTP ${reportResponse.status}` };
      }

      return NextResponse.json(
        { error: errorData.error || "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞" },
        { status: reportResponse.status }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º Excel-—Ñ–∞–π–ª –∫–∞–∫ –±—É—Ñ–µ—Ä
    const buffer = Buffer.from(await reportResponse.arrayBuffer());
 
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–º: ${(buffer.length / 1024).toFixed(2)} KB`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const fileName = `${cabinetId}_${startDate}_${endDate}.xlsx`;
    const filePath = path.join(cabinetDir, fileName);
    
    await fs.writeFile(filePath, buffer);
    console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ URL
    const relativePath = `${cabinetDirName}/${fileName}`;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    return NextResponse.json({
      success: true,
      fileName: fileName,
      filePath: filePath,
      relativePath: relativePath,
      size: buffer.length,
      savedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏:", error);
    
    let errorMessage = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
    
    if (error instanceof Error) {
      console.error("üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:", error.message);
      errorMessage = error.message;
    }
    
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    );
  }
} 