import { NextRequest, NextResponse } from "next/server";
import * as fs from "fs/promises";
import * as path from "path";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string[] }> }
) {
  try {
    // –û–∂–∏–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≤ Next.js 15+ –æ–Ω–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ)
    const resolvedParams = await params;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    const rawFilePath = resolvedParams.slug.join('/');
    const filePath = decodeURIComponent(rawFilePath);
    
    console.log("üìÅ Raw path:", rawFilePath);
    console.log("üìÅ Decoded path:", filePath);
    
    if (!filePath) {
      return new NextResponse("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    if (filePath.includes('..') || filePath.includes('\\')) {
      return new NextResponse("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É", { status: 403 });
    }

    // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const reportsDir = path.join(process.cwd(), 'reports');
    const fullPath = path.join(reportsDir, filePath);
    
    console.log("üìÅ Reports dir:", reportsDir);
    console.log("üìÅ Full path:", fullPath);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ reports
    if (!fullPath.startsWith(reportsDir)) {
      return new NextResponse("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", { status: 403 });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      await fs.access(fullPath);
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const fileBuffer = await fs.readFile(fullPath);
      const fileName = path.basename(fullPath);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
      let contentType = 'application/octet-stream';
      const ext = path.extname(fileName).toLowerCase();
      
      switch (ext) {
        case '.xlsx':
        case '.xls':
          contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
          break;
        case '.json':
          contentType = 'application/json';
          break;
        case '.csv':
          contentType = 'text/csv';
          break;
        case '.pdf':
          contentType = 'application/pdf';
          break;
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
      return new NextResponse(fileBuffer, {
        headers: {
          'Content-Type': contentType,
          'Content-Disposition': `attachment; filename="${fileName}"`,
          'Content-Length': fileBuffer.length.toString(),
          'Cache-Control': 'public, max-age=3600', // –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å
        },
      });
      
    } catch (fileError) {
      console.error("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", fullPath);
      return new NextResponse("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", { status: 404 });
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞:", error);
    return new NextResponse("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", { status: 500 });
  }
} 